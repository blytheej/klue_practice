{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","_templateObject","Responsive","_ref","children","rest","Object","objectWithoutProperties","react_default","a","createElement","palette","gray","cyan","buttonStyle","css","Button_templateObject","props","fullWidth","_templateObject2","_templateObject3","StyledButton","button","_templateObject4","StyledLink","Link","_templateObject5","Button","to","assign","HeaderBlock","Header_templateObject","Wrapper","Header_templateObject2","Spacer","Header_templateObject3","UserInfo","Header_templateObject4","Header","user","onLogout","Fragment","react_router_dom","className","username","common_Button","onClick","client","axios","create","logout","post","startLoading","createAction","requestType","finishLoading","loading","handleActions","_handleActions","defineProperty","state","action","_objectSpread","payload","createRequestActionTypes","type","concat","createRequestSaga","request","SUCCESS","FAILURE","regenerator_default","mark","_callee","response","wrap","_context","prev","next","put","call","sent","data","meta","t0","error","stop","logoutSaga","userSaga","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","_marked","_context2","takeLatest","_marked2","user_handleActions","user_objectSpread","_ref2","checkError","_ref3","HeaderContainer","useSelector","dispatch","useDispatch","common_Header","SubInfoBlock","SubInfo_templateObject","hasMarginTop","SubInfo_templateObject2","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags_templateObject","Tags","tags","map","tag","key","PostListBlock","PostList_templateObject","WritePostButtonWrapper","PostList_templateObject2","PostItemBlock","PostList_templateObject3","PostItem","title","body","_id","common_SubInfo","common_Tags","PostList","posts","showWriteButton","PostList_PostItem","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","posts_marked","posts_handleActions","posts_objectSpread","lastPage","parseInt","headers","withRouter","location","_useSelector","useEffect","_qs$parse","parse","search","ignoreQueryPrefix","posts_PostList","PaginationBlock","Pagination_templateObject","PageNumber","Pagination_templateObject2","buildLink","query","Pagination","disabled","undefined","_qs$parse$page","posts_Pagination","PostListPage","common_HeaderContainer","posts_PostListContainer","posts_PaginationContainer","AuthTemplateBlock","AuthTemplate_templateObject","WhiteBox","AuthTemplate_templateObject2","AuthTemplate","authSaga","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","value","initializeForm","register","password","login","registerSaga","loginSaga","auth_marked","initialState","passwordConfirm","auth","authError","auth_handleActions","_ref4","_ref4$payload","produce","draft","_ref5","_objectSpread2","auth_objectSpread","_ref6","_ref7","_ref8","_ref9","AuthFormBlock","AuthForm_templateObject","StyledInput","input","AuthForm_templateObject2","Footer","AuthForm_templateObject3","ButtonWithMarginTop","AuthForm_templateObject4","textMap","ErrorMessage","AuthForm_templateObject5","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","history","_useState","useState","_useState2","slicedToArray","setError","push","setItem","JSON","auth_AuthForm","_e$target","target","preventDefault","LoginPage","auth_AuthTemplate","auth_LoginForm","status","includes","RegisterPage","auth_RegisterForm","EditorBlock","Editor_templateObject","TitleInput","Editor_templateObject2","QuillWrapper","Editor_templateObject3","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","write_marked","postError","originalPostId","write","write_handleActions","write_objectSpread","EditorContainer","useCallback","write_Editor","TagBoxBlock","TagBox_templateObject","TagForm","TagBox_templateObject2","Tag","TagBox_templateObject3","TagListBlock","TagBox_templateObject4","TagItem","React","memo","onRemove","onChangeTags","TagList","TagBox","setInput","_useState3","_useState4","localTags","setLocalTags","insertTag","nextTags","toConsumableArray","filter","t","trim","TagBoxContainer","write_TagBox","WriteActionButtonsBlock","WriteActionButtons_templateObject","WriteActionButtons_templateObject2","WriteActionButtons","onCancel","onPublish","isEdit","WriteActionButtons_StyledButton","write_WriteActionButtons","goBack","WritePage","common_Responsive","index_module","write_EditorContainer","write_TagBoxContainer","write_WriteActionButtonsContainer","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","unloadPost","readPostSaga","post_marked","post_handleActions","post_objectSpread","PostViewerBlock","PostViewer_templateObject","PostHead","PostViewer_templateObject2","PostContent","PostViewer_templateObject3","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModal_templateObject","AskModalBlock","AskModal_templateObject2","AskModal_templateObject3","AskModal","visible","description","_ref$confirmText","confirmText","_ref$cancelText","cancelText","onConfirm","AskModal_StyledButton","AskRemoveModal","common_AskModal","PostActionButtonsBlock","PostActionButtons_templateObject","ActionButton","PostActionButtons_templateObject2","PostActionButtons","onEdit","modal","setModal","post_AskRemoveModal","match","postId","params","asyncToGenerator","delete","apply","this","arguments","post_PostViewer","post_PostActionButtons","ownPost","PostPage","post_PostViewerContainer","App","react_router","component","path","exact","Boolean","window","hostname","unregister","navigator","serviceWorker","ready","then","registration","rootSaga","all","modules_marked","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3edae886.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","// source: https://yeun.github.io/open-color/\nconst palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529'\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285'\n  ]\n};\n\nexport default palette;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n\n  ${props =>\n    props.fullWidth &&\n    css`\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n\n  ${props =>\n    props.cyan &&\n    css`\n      background: ${palette.cyan[5]};\n      &:hover {\n        background: ${palette.cyan[4]};\n      }\n    `}\n\n    &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n    cursor: not-allowed;\n  }\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\n\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst Button = props => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Responsive from './Responsive';\nimport Button from './Button';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 800;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst Header = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            REACTERS\n          </Link>\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user.username}</UserInfo>\n              <Button onClick={onLogout}>로그아웃</Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n  \n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/' \n\n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    }, \n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })  \n*/\n\nexport default client;\n","import client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('/api/auth/logout');\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING,\n  requestType => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  requestType => requestType\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false\n    })\n  },\n  initialState\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function*(action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout); // logout API 호출\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: state => ({\n      ...state,\n      user: null,\n    }),\n  },\n  initialState,\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\n\nconst HeaderContainer = () => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst SubInfoBlock = styled.div`\n  ${props =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsBlock>\n      {tags.map(tag => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport Button from '../common/Button';\nimport palette from '../../lib/styles/palette';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Link } from 'react-router-dom';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { publishedDate, user, tags, title, body, _id } = post;\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      />\n      <Tags tags={tags} />\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n\n  return (\n    <PostListBlock>\n      <WritePostButtonWrapper>\n        {showWriteButton && (\n          <Button cyan to=\"/write\">\n            새 글 작성하기\n          </Button>\n        )}\n      </WritePostButtonWrapper>\n      {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n      {!loading && posts && (\n        <div>\n          {posts.map(post => (\n            <PostItem post={post} key={post._id} />\n          ))}\n        </div>\n      )}\n    </PostListBlock>\n  );\n};\n\nexport default PostList;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tag, username, page }) => ({ tag, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default posts;\n","import qs from 'qs';\nimport client from './client';\n\nexport const writePost = ({ title, body, tags }) =>\n  client.post('/api/posts', { title, body, tags });\n\nexport const readPost = id => client.get(`/api/posts/${id}`);\n\nexport const listPosts = ({ page, username, tag }) => {\n  const queryString = qs.stringify({\n    page,\n    username,\n    tag,\n  });\n  return client.get(`/api/posts?${queryString}`);\n};\n\nexport const updatePost = ({ id, title, body, tags }) =>\n  client.patch(`/api/posts/${id}`, {\n    title,\n    body,\n    tags,\n  });\n\nexport const removePost = id => client.delete(`/api/posts/${id}`);\n","import React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostList from '../../components/posts/PostList';\nimport { listPosts } from '../../modules/posts';\n\nconst PostListContainer = ({ location }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector(\n    ({ posts, loading, user }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n    }),\n  );\n  useEffect(() => {\n    const { tag, username, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search]);\n\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationBlock>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Pagination from '../../components/posts/Pagination';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport qs from 'qs';\n\nconst PaginationContainer = ({ location }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n  if (!posts || loading) return null;\n\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, username, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostListContainer from '../containers/posts/PostListContainer';\nimport PaginationContainer from '../containers/posts/PaginationContainer';\n\nconst PostListPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostListContainer />\n      <PaginationContainer />\n    </>\n  );\n};\n\nexport default PostListPage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\n/**\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\n */\n\n/* 화면 전체를 채움 */\nconst AuthTemplateBlock = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${palette.gray[2]};\n  /* flex로 내부 내용 중앙 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\n/* 흰색 박스 */\nconst WhiteBox = styled.div`\n  .logo-area {\n    display: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 2px;\n  }\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  border-radius: 2px;\n`;\n\nconst AuthTemplate = ({ children }) => {\n  return (\n    <AuthTemplateBlock>\n      <WhiteBox>\n        <div className=\"logo-area\">\n          <Link to=\"/\">REACTERS</Link>\n        </div>\n        {children}\n      </WhiteBox>\n    </AuthTemplateBlock>\n  );\n};\n\nexport default AuthTemplate;\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, {\n  createRequestActionTypes\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n  'auth/REGISTER'\n);\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n  'auth/LOGIN'\n);\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, // register , login\n    key, // username, password, passwordConfirm\n    value // 실제 바꾸려는 값\n  })\n);\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password\n}));\n\n// saga 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, draft => {\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\n      }),\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\n      ...state,\n      [form]: initialState[form],\n      authError: null // 폼 전환 시 회원 인증 에러 초기화\n    }),\n    // 회원가입 성공\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth\n    }),\n    // 회원가입 실패\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error\n    }),\n    // 로그인 성공\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth\n    }),\n    // 로그인 실패\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error\n    })\n  },\n  initialState\n);\n\nexport default auth;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\nimport Button from '../common/Button';\n\n/**\n * 회원가입 또는 로그인 폼을 보여줍니다.\n */\n\nconst AuthFormBlock = styled.div`\n  h3 {\n    margin: 0;\n    color: ${palette.gray[8]};\n    margin-bottom: 1rem;\n  }\n`;\n\n/**\n * 스타일링된 input\n */\nconst StyledInput = styled.input`\n  font-size: 1rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding-bottom: 0.5rem;\n  outline: none;\n  width: 100%;\n  &:focus {\n    color: $oc-teal-7;\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  & + & {\n    margin-top: 1rem;\n  }\n`;\n\n/**\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\n */\nconst Footer = styled.div`\n  margin-top: 2rem;\n  text-align: right;\n  a {\n    color: ${palette.gray[6]};\n    text-decoration: underline;\n    &:hover {\n      color: ${palette.gray[9]};\n    }\n  }\n`;\n\nconst ButtonWithMarginTop = styled(Button)`\n  margin-top: 1rem;\n`;\n\nconst textMap = {\n  login: '로그인',\n  register: '회원가입'\n};\n\n/**\n * 에러를 보여줍니다\n */\nconst ErrorMessage = styled.div`\n  color: red;\n  text-align: center;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n`;\n\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\n  const text = textMap[type];\n  return (\n    <AuthFormBlock>\n      <h3>{text}</h3>\n      <form onSubmit={onSubmit}>\n        <StyledInput\n          autoComplete=\"username\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          onChange={onChange}\n          value={form.username}\n        />\n        <StyledInput\n          autoComplete=\"new-password\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          onChange={onChange}\n          value={form.password}\n        />\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"new-password\"\n            name=\"passwordConfirm\"\n            placeholder=\"비밀번호 확인\"\n            type=\"password\"\n            onChange={onChange}\n            value={form.passwordConfirm}\n          />\n        )}\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <ButtonWithMarginTop cyan fullWidth style={{ marginTop: '1rem' }}>\n          {text}\n        </ButtonWithMarginTop>\n      </form>\n      <Footer>\n        {type === 'login' ? (\n          <Link to=\"/register\">회원가입</Link>\n        ) : (\n          <Link to=\"/login\">로그인</Link>\n        )}\n      </Footer>\n    </AuthFormBlock>\n  );\n};\n\nexport default AuthForm;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\n\nconst LoginForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.login,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'login',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password } = form;\n    dispatch(login({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('login'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      console.log('오류 발생');\n      console.log(authError);\n      setError('로그인 실패');\n      return;\n    }\n    if (auth) {\n      console.log('로그인 성공');\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"login\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(LoginForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport LoginForm from '../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    // 하나라도 비어있다면\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({ form: 'register', key: 'password', value: '' });\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공 / 실패 처리\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타 이유\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/'); // 홈 화면으로 이동\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\nimport AuthTemplate from '../components/auth/AuthTemplate';\nimport RegisterForm from '../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <AuthTemplate>\n      <RegisterForm />\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import React, { useRef, useEffect } from 'react';\nimport Quill from 'quill';\nimport 'quill/dist/quill.bubble.css';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\n\nconst EditorBlock = styled(Responsive)`\n  /* 페이지 위 아래 여백 지정 */\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n`;\nconst TitleInput = styled.input`\n  font-size: 3rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\nconst QuillWrapper = styled.div`\n  /* 최소 크기 지정 및 padding 제거 */\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\n\nconst Editor = ({ title, body, onChangeField }) => {\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        // 더 많은 옵션\n        // https://quilljs.com/docs/modules/toolbar/ 참고\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['blockquote', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n\n    // quill에 text-change 이벤트 핸들러 등록\n    // 참고: https://quilljs.com/docs/api/#events\n    const quill = quillInstance.current;\n    quill.on('text-change', (delta, oldDelta, source) => {\n      if (source === 'user') {\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField]);\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    quillInstance.current.root.innerHTML = body;\n  }, [body]);\n\n  const onChangeTitle = e => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement} />\n      </QuillWrapper>\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({\n    id,\n    title,\n    body,\n    tags,\n  }),\n);\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: state => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n","import React, { useEffect, useCallback } from 'react';\nimport Editor from '../../components/write/Editor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize } from '../../modules/write';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n  const { title, body } = useSelector(({ write }) => ({\n    title: write.title,\n    body: write.body,\n  }));\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\n    dispatch,\n  ]);\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\n};\n\nexport default EditorContainer;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]}\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\nconst TagItem = React.memo(({ tag, onRemove, onChangeTags }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListBlock>\n    {tags.map(tag => (\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\n    ))}\n  </TagListBlock>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n\n  const insertTag = useCallback(\n    tag => {\n      if (!tag) return; // 공백이라면 추가하지 않음\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    tag => {\n      const nextTags = localTags.filter(t => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback(e => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n      setInput(''); // input 초기화\n    },\n    [input, insertTag],\n  );\n\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/write/TagBox';\nimport { changeField } from '../../modules/write';\n\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const tags = useSelector(state => state.write.tags);\n\n  const onChangeTags = nextTags => {\n    dispatch(\n      changeField({\n        key: 'tags',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\n};\n\nexport default TagBoxContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {isEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n      return;\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\nimport Responsive from '../components/common/Responsive';\nimport EditorContainer from '../containers/write/EditorContainer';\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\nimport { Helmet } from 'react-helmet-async';\n\nconst WritePage = () => {\n  return (\n    <Responsive>\n      <Helmet>\n        <title>글 작성하기 - REACTERS</title>\n      </Helmet>\n\n      <EditorContainer />\n      <TagBoxContainer />\n      <WriteActionButtonsContainer />\n    </Responsive>\n  );\n};\n\nexport default WritePage;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = {\n  post: null,\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Helmet } from 'react-helmet-async';\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\n  // 에러 발생 시\n  if (error) {\n    if (error.response && error.response.status === 404) {\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\n    }\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\n  }\n\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\n  if (loading || !post) {\n    return null;\n  }\n\n  const { title, body, user, publishedDate, tags } = post;\n  return (\n    <PostViewerBlock>\n      <Helmet>\n        <title>{title} - REACTERS</title>\n      </Helmet>\n\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={tags} />\n      </PostHead>\n      {actionButtons}\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\n    </PostViewerBlock>\n  );\n};\n\nexport default PostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: white;\n  padding: 1.5rem;\n  border-radius: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\n\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}) => {\n  if (!visible) return null;\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton cyan onClick={onConfirm}>\n            {confirmText}\n          </StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst PostActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <PostActionButtonsBlock>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      </PostActionButtonsBlock>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default PostActionButtons;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={<PostActionButtons onEdit={onEdit} onRemove={onRemove} />}\n      ownPost={user && user.id === post && post.id}\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import React from 'react';\nimport HeaderContainer from '../containers/common/HeaderContainer';\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\n\nconst PostPage = () => {\n  return (\n    <>\n      <HeaderContainer />\n      <PostViewerContainer />\n    </>\n  );\n};\n\nexport default PostPage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={PostPage} path=\"/@:username/:postId\" />\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n\nserviceWorker.unregister();\n"],"sourceRoot":""}